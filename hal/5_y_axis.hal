setp   pid.y.Pgain     [JOINT_1]P
setp   pid.y.Igain     [JOINT_1]I
setp   pid.y.Dgain     [JOINT_1]D
setp   pid.y.bias      [JOINT_1]BIAS
setp   pid.y.FF0       [JOINT_1]FF0
setp   pid.y.FF1       [JOINT_1]FF1
setp   pid.y.FF2       [JOINT_1]FF2
setp   pid.y.FF3       [JOINT_1]FF3
setp   pid.y.deadband  [JOINT_1]DEADBAND
setp   pid.y.maxoutput [JOINT_1]MAX_OUTPUT
setp   pid.y.error-previous-target true

net y-index-enable  <=> pid.y.index-enable
net y-enable        =>  pid.y.enable
net y-output        <=  pid.y.output
net y-pos-cmd       =>  pid.y.command
net y-pos-fb        =>  pid.y.feedback
net y-vel-fb        =>  pid.y.feedback-deriv

# Step Gen signals/setup

setp   [HMOT](CARD0).stepgen.01.dirsetup        [JOINT_1]DIRSETUP
setp   [HMOT](CARD0).stepgen.01.dirhold         [JOINT_1]DIRHOLD
setp   [HMOT](CARD0).stepgen.01.steplen         [JOINT_1]STEPLEN
setp   [HMOT](CARD0).stepgen.01.stepspace       [JOINT_1]STEPSPACE
setp   [HMOT](CARD0).stepgen.01.position-scale  [JOINT_1]STEP_SCALE
setp   [HMOT](CARD0).stepgen.01.step_type        0
setp   [HMOT](CARD0).stepgen.01.control-type     1
setp   [HMOT](CARD0).stepgen.01.maxaccel         [JOINT_1]STEPGEN_MAXACCEL
setp   [HMOT](CARD0).stepgen.01.maxvel           [JOINT_1]STEPGEN_MAXVEL

# ---closedloop stepper signals---


net y-pos-cmd    <= joint.1.motor-pos-cmd
net y-output     => [HMOT](CARD0).stepgen.01.velocity-cmd
net y-enable     <= joint.1.amp-enable-out => [HMOT](CARD0).stepgen.01.enable  

# ---Encoder Feedback signals/setup---

# Linear Scale Setup
setp    [FIELD_INPUT](Y_LINEAR_ENCODER).counter-mode 0
setp    [FIELD_INPUT](Y_LINEAR_ENCODER).filter 1
setp    [FIELD_INPUT](Y_LINEAR_ENCODER).index-invert 0
setp    [FIELD_INPUT](Y_LINEAR_ENCODER).index-mask 0
setp    [FIELD_INPUT](Y_LINEAR_ENCODER).index-mask-invert 0
setp    [FIELD_INPUT](Y_LINEAR_ENCODER).scale  [JOINT_1]ENCODER_SCALE

# Motor Encoder Feedback setup
# setp    [FIELD_INPUT](Y_MOTOR_ENCODER).counter-mode 0
# setp    [FIELD_INPUT](Y_MOTOR_ENCODER).filter 1
# setp    [FIELD_INPUT](Y_MOTOR_ENCODER).index-invert 1
# setp    [FIELD_INPUT](Y_MOTOR_ENCODER).index-mask 0
# setp    [FIELD_INPUT](Y_MOTOR_ENCODER).index-mask-invert 0
# setp    [FIELD_INPUT](Y_MOTOR_ENCODER).scale  [JOINT_1]MOTOR_ENCODER_SCALE

# Linear Scale Signals
net y-pos-fb               <=  [FIELD_INPUT](Y_LINEAR_ENCODER).position
net y-pos-fb               =>  joint.1.motor-pos-fb
net y-vel-fb               <=  [FIELD_INPUT](Y_LINEAR_ENCODER).velocity
net y-index-enable    joint.1.index-enable  <=>  [FIELD_INPUT](Y_LINEAR_ENCODER).index-enable
net y-pos-rawcounts        <=  [FIELD_INPUT](Y_LINEAR_ENCODER).rawcounts

# Linear Scale Signals
# net y-motor-pos-fb               <=  [FIELD_INPUT](Y_MOTOR_ENCODER).position
# net y-motor-vel-fb               <=  [FIELD_INPUT](Y_MOTOR_ENCODER).velocity
# net y-motor-index-enable         <=  [FIELD_INPUT](Y_MOTOR_ENCODER).index-enable
# net y-motor-pos-rawcounts        <=  [FIELD_INPUT](Y_MOTOR_ENCODER).rawcounts

# ---setup home / limit switch signals---

net home-y <= [FIELD_INPUT](HOME_Y)-not =>  joint.1.home-sw-in
setp joint.1.neg-lim-sw-in 0
setp joint.1.pos-lim-sw-in 0

## Alarm
net y-servo-alarm-input <= [FIELD_INPUT](DYN_4_Y_ALARM)-not => y-servo-alarm.in0
net enable-del => y-servo-alarm.in1
net y-servo-alarm-out joint.1.amp-fault-in <= y-servo-alarm.out
